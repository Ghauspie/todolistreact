{"ast":null,"code":"import _classCallCheck from \"D:\\\\Totolistjs\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"D:\\\\Totolistjs\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\Totolistjs\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\Totolistjs\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { completedTask } from '../actions';\n\nvar CompletedTask = /*#__PURE__*/function (_Component) {\n  _inherits(CompletedTask, _Component);\n\n  function CompletedTask() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, CompletedTask);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(CompletedTask)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.handleSubmit = function (e) {\n      var _this$props = _this.props,\n          onToggleCompleted = _this$props.onToggleCompleted,\n          task = _this$props.task;\n\n      _this.setState(function (prevState) {\n        return {\n          completed: !prevState.completed\n        };\n      });\n\n      onToggleCompleted(task.id);\n    };\n\n    return _this;\n  }\n\n  return CompletedTask;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    tasks: state.tasks\n  };\n};\n\nexport default CompletedTask;","map":{"version":3,"sources":["D:/Totolistjs/src/components/CompletedTask.js"],"names":["React","Component","connect","completedTask","CompletedTask","handleSubmit","e","props","onToggleCompleted","task","setState","prevState","completed","id","mapStateToProps","state","tasks"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,aAAT,QAA8B,YAA9B;;IAGMC,a;;;;;;;;;;;;;;;;UAEFC,Y,GAAe,UAACC,CAAD,EAAO;AAAA,wBAEe,MAAKC,KAFpB;AAAA,UAEZC,iBAFY,eAEZA,iBAFY;AAAA,UAEOC,IAFP,eAEOA,IAFP;;AAGlB,YAAKC,QAAL,CAAc,UAAAC,SAAS;AAAA,eAAK;AACxBC,UAAAA,SAAS,EAAE,CAACD,SAAS,CAACC;AADE,SAAL;AAAA,OAAvB;;AAGAJ,MAAAA,iBAAiB,CAACC,IAAI,CAACI,EAAN,CAAjB;AACH,K;;;;;;EATuBZ,S;;AAW5B,IAAMa,eAAe,GAAG,SAAlBA,eAAkB,CAACC,KAAD,EAAW;AAC/B,SAAO;AACHC,IAAAA,KAAK,EAAED,KAAK,CAACC;AADV,GAAP;AAGH,CAJD;;AAOA,eAAeZ,aAAf","sourcesContent":["import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { completedTask } from '../actions';\r\n\r\n\r\nclass CompletedTask extends Component {\r\n\r\n    handleSubmit = (e) => {\r\n        \r\n        let { onToggleCompleted, task} = this.props\r\n        this.setState(prevState => ({\r\n            completed: !prevState.completed\r\n        }))\r\n        onToggleCompleted(task.id)\r\n    }\r\n}\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        tasks: state.tasks\r\n    }\r\n}\r\n\r\n    \r\nexport default CompletedTask;\r\n    \r\n"]},"metadata":{},"sourceType":"module"}