{"ast":null,"code":"import _classCallCheck from \"D:\\\\Totolistjs\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"D:\\\\Totolistjs\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\Totolistjs\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\Totolistjs\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\n\nvar _this = this;\n\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { completedTask } from '../actions';\n\nvar onToggleCompleted = function onToggleCompleted(taskId) {\n  //get the task to modify\n  var updTask = _this.state.tasks.find(function (task) {\n    return task.id === taskId;\n  }); //toggle the value of completed in the task\n\n\n  updTask.completed = !updTask.completed; //put the new version of the task in the state\n\n  _this.setState(function (prevState) {\n    return prevState.tasks.map(function (task) {\n      return task.id === taskId ? updTask : task;\n    });\n  });\n};\n\nvar CompletedTask = /*#__PURE__*/function (_Component) {\n  _inherits(CompletedTask, _Component);\n\n  function CompletedTask() {\n    var _getPrototypeOf2;\n\n    var _this2;\n\n    _classCallCheck(this, CompletedTask);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this2 = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(CompletedTask)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this2.handleSubmit = function (e) {\n      var _this2$props = _this2.props,\n          onToggleCompleted = _this2$props.onToggleCompleted,\n          task = _this2$props.task;\n\n      _this2.setState(function (prevState) {\n        return {\n          completed: !prevState.completed\n        };\n      });\n\n      onToggleCompleted(task.id);\n    };\n\n    return _this2;\n  }\n\n  return CompletedTask;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    tasks: state.tasks\n  };\n};\n\nexport default CompletedTask;","map":{"version":3,"sources":["D:/Totolistjs/src/components/CompletedTask.js"],"names":["React","Component","connect","completedTask","onToggleCompleted","taskId","updTask","state","tasks","find","task","id","completed","setState","prevState","map","CompletedTask","handleSubmit","e","props","mapStateToProps"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,aAAT,QAA8B,YAA9B;;AAEA,IAAQC,iBAAiB,GAAG,SAApBA,iBAAoB,CAACC,MAAD,EAAY;AACpC;AACA,MAAIC,OAAO,GAAG,KAAI,CAACC,KAAL,CAAWC,KAAX,CAAiBC,IAAjB,CAAsB,UAAAC,IAAI;AAAA,WAAIA,IAAI,CAACC,EAAL,KAAYN,MAAhB;AAAA,GAA1B,CAAd,CAFoC,CAGpC;;;AACAC,EAAAA,OAAO,CAACM,SAAR,GAAoB,CAACN,OAAO,CAACM,SAA7B,CAJoC,CAKpC;;AACA,EAAA,KAAI,CAACC,QAAL,CAAc,UAAAC,SAAS;AAAA,WACrBA,SAAS,CAACN,KAAV,CAAgBO,GAAhB,CAAoB,UAAAL,IAAI,EAAI;AAC1B,aAAOA,IAAI,CAACC,EAAL,KAAYN,MAAZ,GAAqBC,OAArB,GAA+BI,IAAtC;AACD,KAFD,CADqB;AAAA,GAAvB;AAKD,CAXH;;IAaMM,a;;;;;;;;;;;;;;;;WAEFC,Y,GAAe,UAACC,CAAD,EAAO;AAAA,yBAEe,OAAKC,KAFpB;AAAA,UAEZf,iBAFY,gBAEZA,iBAFY;AAAA,UAEOM,IAFP,gBAEOA,IAFP;;AAGlB,aAAKG,QAAL,CAAc,UAAAC,SAAS;AAAA,eAAK;AACxBF,UAAAA,SAAS,EAAE,CAACE,SAAS,CAACF;AADE,SAAL;AAAA,OAAvB;;AAGAR,MAAAA,iBAAiB,CAACM,IAAI,CAACC,EAAN,CAAjB;AACH,K;;;;;;EATuBV,S;;AAW5B,IAAMmB,eAAe,GAAG,SAAlBA,eAAkB,CAACb,KAAD,EAAW;AAC/B,SAAO;AACHC,IAAAA,KAAK,EAAED,KAAK,CAACC;AADV,GAAP;AAGH,CAJD;;AAOA,eAAeQ,aAAf","sourcesContent":["import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { completedTask } from '../actions';\r\n\r\nconst   onToggleCompleted = (taskId) => {\r\n    //get the task to modify\r\n    let updTask = this.state.tasks.find(task => task.id === taskId)\r\n    //toggle the value of completed in the task\r\n    updTask.completed = !updTask.completed\r\n    //put the new version of the task in the state\r\n    this.setState(prevState => (\r\n      prevState.tasks.map(task => {\r\n        return task.id === taskId ? updTask : task\r\n      })\r\n    ))\r\n  }\r\n\r\nclass CompletedTask extends Component {\r\n\r\n    handleSubmit = (e) => {\r\n       \r\n        let { onToggleCompleted, task} = this.props\r\n        this.setState(prevState => ({\r\n            completed: !prevState.completed\r\n        }))\r\n        onToggleCompleted(task.id)\r\n    }\r\n}\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        tasks: state.tasks\r\n    }\r\n}\r\n\r\n    \r\nexport default CompletedTask;\r\n    \r\n"]},"metadata":{},"sourceType":"module"}