{"ast":null,"code":"import _classCallCheck from \"D:\\\\Totolistjs\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"D:\\\\Totolistjs\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\Totolistjs\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\Totolistjs\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport React, { Component } from 'react';\nimport { FaTasks } from 'react-icons/fa';\nimport { connect } from 'react-redux';\nimport { completedTask } from '../actions';\n\nvar CompletedTask = /*#__PURE__*/function (_Component) {\n  _inherits(CompletedTask, _Component);\n\n  function CompletedTask() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, CompletedTask);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(CompletedTask)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.handleSubmit = function (e) {\n      //On recupere l'id de la tack qu'on souhaite passer en complete ou la decompleter\n      var item = {\n        id: _this.tasks.id,\n        name: _this.Task.value,\n        completed: !_this.tasks.completed\n      };\n\n      _this.props.addTask(item);\n      /* let { onToggleCompleted, task} = this.props\r\n      this.setState(prevState => ({\r\n          completed: !prevState.completed\r\n      }))\r\n      onToggleCompleted(task.id) */\n\n    };\n\n    return _this;\n  }\n\n  return CompletedTask;\n}(Component);\n/* const mapStateToProps = (state) => {\r\n    return {\r\n        tasks: state.tasks\r\n    }\r\n} */\n\n\nexport default CompletedTask;","map":{"version":3,"sources":["D:/Totolistjs/src/components/CompletedTask.js"],"names":["React","Component","FaTasks","connect","completedTask","CompletedTask","handleSubmit","e","item","id","tasks","name","Task","value","completed","props","addTask"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,gBAAxB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,aAAT,QAA8B,YAA9B;;IAIMC,a;;;;;;;;;;;;;;;;UAIFC,Y,GAAe,UAACC,CAAD,EAAO;AACnB;AACA,UAAIC,IAAI,GAAG;AACVC,QAAAA,EAAE,EAAE,MAAKC,KAAL,CAAWD,EADL;AAEVE,QAAAA,IAAI,EAAE,MAAKC,IAAL,CAAUC,KAFN;AAGVC,QAAAA,SAAS,EAAE,CAAC,MAAKJ,KAAL,CAAWI;AAHb,OAAX;;AAKH,YAAKC,KAAL,CAAWC,OAAX,CAAmBR,IAAnB;AACI;AACR;AACA;AACA;AACA;;AACO,K;;;;;;EAjBqBP,S;AAqB5B;AACA;AACA;AACA;AACA;;;AAGA,eAAeI,aAAf","sourcesContent":["import React, { Component } from 'react';\r\nimport { FaTasks } from 'react-icons/fa';\r\nimport { connect } from 'react-redux';\r\nimport { completedTask } from '../actions';\r\n\r\n\r\n\r\nclass CompletedTask extends Component {\r\n\r\n\r\n\r\n    handleSubmit = (e) => {\r\n       //On recupere l'id de la tack qu'on souhaite passer en complete ou la decompleter\r\n       let item = {\r\n        id: this.tasks.id,\r\n        name: this.Task.value,\r\n        completed: !this.tasks.completed,\r\n    }\r\n    this.props.addTask(item)\r\n        /* let { onToggleCompleted, task} = this.props\r\n        this.setState(prevState => ({\r\n            completed: !prevState.completed\r\n        }))\r\n        onToggleCompleted(task.id) */\r\n      }  \r\n      \r\n}\r\n\r\n/* const mapStateToProps = (state) => {\r\n    return {\r\n        tasks: state.tasks\r\n    }\r\n} */\r\n\r\n    \r\nexport default CompletedTask;\r\n    \r\n"]},"metadata":{},"sourceType":"module"}